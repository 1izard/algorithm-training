#include <algorithm>
#include <stdio.h>

#define INF 1'000'000'000
#define N 5

using namespace std;

int D[N + 1][N][N];
int P[N][N][N];
int W[N][N];

void floyd_warshall(int W[][N]) {
  for (int i = 0; i < N; ++i) {
    for (int j = 0; j < N; ++j) {
      D[0][i][j] = W[i][j];
      if (i == j || W[i][j] >= INF) {
        P[0][i][j] = -1;
      } else {
        P[0][i][j] = i;
      }
    }
  }
  for (int k = 1; k <= N; ++k) {
    for (int i = 0; i < N; ++i) {
      for (int j = 0; j < N; ++j) {
        int d = D[k - 1][i][k - 1] + D[k - 1][k - 1][j];
        if (d < D[k - 1][i][j]) {
          D[k][i][j] = d;
          P[k][i][j] = P[k - 1][k - 1][j];
        } else {
          D[k][i][j] = D[k - 1][i][j];
          P[k][i][j] = P[k - 1][i][j];
        }
      }
    }
  }
}

void print_matrix(int M[][N]) {
  printf("[");
  for (int i = 0; i < N; ++i) {
    if (i > 0) {
      printf(" ");
    }
    printf("[");
    for (int j = 0; j < N; ++j) {
      printf("%3d, ", M[i][j]);
    }
    printf("]");
    if (i < N - 1) {
      printf("\n");
    }
  }
  printf("]\n");
}

int main() {
  for (int i = 0; i < N; ++i) {
    for (int j = 0; j < N; ++j) {
      if (i == j) {
        W[i][j] = 0;
      } else {
        W[i][j] = INF;
      }
    }
  }

  W[0][1] = 3;
  W[0][2] = 8;
  W[0][4] = -4;
  W[1][3] = 1;
  W[1][4] = 7;
  W[2][1] = 4;
  W[3][2] = -5;
  W[3][0] = 2;
  W[4][3] = 6;

  floyd_warshall(W);

  printf("# D\n");
  for (int k = 0; k <= N; ++k) {
    printf("k: %d\n", k);
    print_matrix(D[k]);
    printf("\n");
  }
  printf("\n");

  printf("# P\n");
  for (int k = 0; k < N; ++k) {
    printf("k: %d\n", k);
    print_matrix(P[k]);
    printf("\n");
  }
}

// # D
// k: 0
// [[  0,   3,   8, 1000000000,  -4, ]
//  [1000000000,   0, 1000000000,   1,   7, ]
//  [1000000000,   4,   0, 1000000000, 1000000000, ]
//  [  2, 1000000000,  -5,   0, 1000000000, ]
//  [1000000000, 1000000000, 1000000000,   6,   0, ]]

// k: 1
// [[  0,   3,   8, 1000000000,  -4, ]
//  [1000000000,   0, 1000000000,   1,   7, ]
//  [1000000000,   4,   0, 1000000000, 999999996, ]
//  [  2,   5,  -5,   0,  -2, ]
//  [1000000000, 1000000000, 1000000000,   6,   0, ]]

// k: 2
// [[  0,   3,   8,   4,  -4, ]
//  [1000000000,   0, 1000000000,   1,   7, ]
//  [1000000000,   4,   0,   5,  11, ]
//  [  2,   5,  -5,   0,  -2, ]
//  [1000000000, 1000000000, 1000000000,   6,   0, ]]

// k: 3
// [[  0,   3,   8,   4,  -4, ]
//  [1000000000,   0, 1000000000,   1,   7, ]
//  [1000000000,   4,   0,   5,  11, ]
//  [  2,  -1,  -5,   0,  -2, ]
//  [1000000000, 1000000000, 1000000000,   6,   0, ]]

// k: 4
// [[  0,   3,  -1,   4,  -4, ]
//  [  3,   0,  -4,   1,  -1, ]
//  [  7,   4,   0,   5,   3, ]
//  [  2,  -1,  -5,   0,  -2, ]
//  [  8,   5,   1,   6,   0, ]]

// k: 5
// [[  0,   1,  -3,   2,  -4, ]
//  [  3,   0,  -4,   1,  -1, ]
//  [  7,   4,   0,   5,   3, ]
//  [  2,  -1,  -5,   0,  -2, ]
//  [  8,   5,   1,   6,   0, ]]

// # P
// k: 0
// [[ -1,   0,   0,  -1,   0, ]
//  [ -1,  -1,  -1,   1,   1, ]
//  [ -1,   2,  -1,  -1,  -1, ]
//  [  3,  -1,   3,  -1,  -1, ]
//  [ -1,  -1,  -1,   4,  -1, ]]

// k: 1
// [[ -1,   0,   0,  -1,   0, ]
//  [ -1,  -1,  -1,   1,   1, ]
//  [ -1,   2,  -1,  -1,   0, ]
//  [  3,   0,   3,  -1,   0, ]
//  [ -1,  -1,  -1,   4,  -1, ]]

// k: 2
// [[ -1,   0,   0,   1,   0, ]
//  [ -1,  -1,  -1,   1,   1, ]
//  [ -1,   2,  -1,   1,   1, ]
//  [  3,   0,   3,  -1,   0, ]
//  [ -1,  -1,  -1,   4,  -1, ]]

// k: 3
// [[ -1,   0,   0,   1,   0, ]
//  [ -1,  -1,  -1,   1,   1, ]
//  [ -1,   2,  -1,   1,   1, ]
//  [  3,   2,   3,  -1,   0, ]
//  [ -1,  -1,  -1,   4,  -1, ]]

// k: 4
// [[ -1,   0,   3,   1,   0, ]
//  [  3,  -1,   3,   1,   0, ]
//  [  3,   2,  -1,   1,   0, ]
//  [  3,   2,   3,  -1,   0, ]
//  [  3,   2,   3,   4,  -1, ]]
